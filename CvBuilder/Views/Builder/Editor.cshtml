@model CvBuilder.Models.CvMasterModel
@{
    ViewBag.Title = "Edit my CV online";
}
<link href="~/Content/bootstrap-datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap.css" rel="stylesheet" />
<link href="~/Content/mab-jquery-taginput.css" rel="stylesheet" />

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script src="~/Scripts/typeahead.bundle.js"></script>
<script src="~/Scripts/mab-jquery-taginput.js"></script>
<style>
    .collapsible {
        background-color: #7085ba;
        margin-bottom: 2px;
        color: white;
        cursor: pointer;
        padding: 15px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 20px;
    }

    .completed {
        background-color: #59b467;
    }

    .active, .collapsible:hover {
        background-color: #566c9f;
    }

    .collapsible:after {
        content: '\002B';
        color: white;
        font-size: 20px;
        font-weight: bold;
        float: right;
        margin-left: 5px;
        clear: both;
    }

    .active:after {
        content: "\2212";
    }

    .content {
        padding: 0 18px;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
        background-color: #f1f1f1;
    }
</style>

<h2>Edit your information by sections</h2>
@using (Html.BeginForm("SaveData", "Builder", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    if (ViewData.ModelState["masterModel"] != null && ViewData.ModelState["masterModel"].Errors.Count > 0)
    {
        <div class="alert alert-danger">
            <button class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            @Html.ValidationSummary(false, "We encountered some problems: ")
        </div>
    }


    <button type="button" class="collapsible">Contact info</button>
    <div class="content">
        @Html.Action("FormAddContactInfo", "Builder", Model.ContactInfo)
    </div>
    <button type="button" class="collapsible">Professional Experience</button>
    <div class="content" style="height:auto">
        @Html.Action("FormAddWork", "Builder", Model.Work)
    </div>
    <button type="button" class="collapsible">Educational History</button>
    <div class="content">
        @Html.Action("FormAddEducation", "Builder", Model.Education)
    </div>
    <button type="button" class="collapsible">Language skills</button>
    <div class="content">
        @Html.Action("FormAddLanguages", "Builder", Model.Languages)
    </div>
    <button type="button" class="collapsible">Technical Skills</button>
    <div class="content">
        @Html.Action("FormAddSkills", "Builder", Model.Skills)
    </div>
    <button type="button" class="collapsible">Trainings, certifications, awards</button>
    <div class="content">
        @Html.Action("FormAddCertifications", "Builder", Model.Certifications)
    </div>
    <button type="button" class="collapsible">References and other info</button>
    <div class="content">
        @Html.Action("FormAddOtherInfo", "Builder", Model.OtherInfo)
    </div>

    <div class="col-lg-12 col-md-12 text-center">
        <button type="submit" class="btn btn-lg btn-success">Generate my CV</button>
    </div>

    <input type="text" class="form-control tag-input" name="tags0" id="tags0" value="">
}
<div aria-live="polite" aria-atomic="true" style="position:absolute; top:10px; right:10px; min-width: 300px; z-index: 999;">
    <div role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-autohide="true" data-delay="1000" style="position: absolute; top: 0; right: 0;">
        <div class="toast-header" style="color:white;background-color:#59b467">
            <strong class="mr-auto" id="toastTitle">Info</strong>
            <small>now</small>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body" id="toastMessage">
            Your info was saved!
        </div>
    </div>
</div>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");

            var label = $(this).find(".completedLabel");
            if (label !== null) label.remove();

            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + "px";
            }
        });
    }
    var saveButtons = document.getElementsByClassName("save-section");
    for (i = 0; i < saveButtons.length; i++) {
        saveButtons[i].addEventListener("click", function () {
            var content = $(this).closest(".content");
            var openTab = content.prev();
            $(this).removeClass("active");
            openTab.trigger("click");
            //TODO: toggle only if form was validated ok
            openTab.addClass("completed");

            $("#toastTitle").text("Success");
            $("#toastMessage").text(openTab.text() + " saved");

            $('.toast').toast('show');

        });
    }

    //$('.datepicker').datepicker({
    //    autoclose: true,
    //    format: 'dd-mm-yyyy',
    //    leftArrow: '&laquo;',
    //    rightArrow: '&raquo;',//le pot inlocui cu alte icons eg <i class="fa fa-long-arrow-left"></i>,
    //    todayHighlight: true
    //});


    $(document).ready(function () {

        var tags = new Bloodhound({
            datumTokenizer: function (d) { return Bloodhound.tokenizers.whitespace(d.value); },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: [
                { tag: 'dog', value: 'aaa' },
                { tag: 'cat', value: 'bbb' },
                { tag: 'fish', value: 'ccc' },
                { tag: 'catfish', value: 'ddd' },
                { tag: 'dogfish', value: 'eee' }
            ]
        });

        tags.initialize();

        // Write callback data to the screen when tags are added or removed in demo inputs
        var logCallbackDataToConsole = function (added, removed) {
            console.log('Tag Data: ' + (this.val() || null) + ', Added: ' + added + ', Removed: ' + removed + '\n');
        };

        // Create typeahead-enabled tag inputs
        $('.tag-input').tagInput({
            allowDuplicates: false,
            typeahead: true,
            typeaheadOptions: {
                highlight: true
            },
            typeaheadDatasetOptions: {
                display: function (d) { return d.value; },
                source: tags.ttAdapter()
            },
            onTagDataChanged: logCallbackDataToConsole
        });

        //// Create basic tag inputs with no typeahead
        //$('.tag-input-basic').tagInput({
        //    onTagDataChanged: logCallbackDataToConsole
        //});

    });

</script>
